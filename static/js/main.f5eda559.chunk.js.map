{"version":3,"sources":["store/reducer.js","DisplayScreen/DisplayScreen.js","Controls/Controls.js","Calculator/Calculator.js","App.js","serviceWorker.js","index.js","store/actions/actions.js"],"names":["initialState","result","operand","background","lastNumber","lightTheme","reducer","state","action","value","val","type","actionTypes","length","eval","connect","props","className","disabled","themeName","dispatch","addOperand","addNumber","number","clearResult","showResult","changeTheme","onClick","event","target","Calculator","Component","App","this","Boolean","window","location","hostname","match","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","ADD_OPERAND","ADD_NUMBER","CLEAR_RESULT","SHOW_RESULT","CHANGE_THEME"],"mappings":"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","file":"static/js/main.f5eda559.chunk.js","sourcesContent":["import * as actionTypes from './actions/actions';\r\nconst initialState = {\r\n  result: 0,\r\n  operand: '',\r\n  background: '',\r\n  lastNumber: '', //for more than one digit Number\r\n  lightTheme: 'true'\r\n};\r\n\r\nconst reducer = (state = initialState, action) => {\r\n  const value = action.val;\r\n  const operand = state.operand;\r\n  const result = state.result;\r\n  const background = state.background;\r\n  const lastNumber = state.lastNumber;\r\n\r\n  switch (action.type) {\r\n    case actionTypes.ADD_OPERAND:\r\n      if (operand.length === 0) {\r\n        //Handling Error\r\n        return {\r\n          ...state,\r\n          result: eval(background + operand + result),\r\n          operand: value,\r\n          background: eval(background + operand + result),\r\n          lastNumber: ''\r\n        };\r\n      } else {\r\n        return {\r\n          ...state\r\n        };\r\n      }\r\n\r\n    case actionTypes.ADD_NUMBER:\r\n      return {\r\n        ...state,\r\n        result: lastNumber + value,\r\n        lastNumber: lastNumber + value\r\n      };\r\n    case actionTypes.CLEAR_RESULT:\r\n      return {\r\n        result: 0,\r\n        operand: '',\r\n        background: '',\r\n        lastNumber: '',\r\n        lightTheme: state.lightTheme\r\n      };\r\n    case actionTypes.SHOW_RESULT:\r\n      return {\r\n        result: eval(background + operand + result),\r\n        operand: '',\r\n        background: '',\r\n        lightTheme: state.lightTheme\r\n      };\r\n    case actionTypes.CHANGE_THEME:\r\n      return {\r\n        ...state,\r\n        lightTheme: !state.lightTheme\r\n      };\r\n  }\r\n  return state;\r\n};\r\n\r\nexport default reducer;\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\nconst DisplayScreen = props => (\r\n  <>\r\n    <input\r\n      type='text'\r\n      className='calculator-screen z-depth-1'\r\n      value={props.result}\r\n      disabled\r\n    />\r\n  </>\r\n);\r\nconst stateToProps = state => {\r\n  return { result: state.result };\r\n};\r\nexport default connect(stateToProps)(DisplayScreen);\r\n","import React from 'react';\r\nimport { connect } from 'react-redux';\r\n\r\nconst Controls = props => (\r\n  <div className='calculator-keys'>\r\n    <button\r\n      type='button'\r\n      className='btn btn-light waves-effect'\r\n      value='+'\r\n      onClick={event => {\r\n        props.addOperand(event.target.value);\r\n      }}\r\n    >\r\n      +\r\n    </button>\r\n    <button\r\n      type='button'\r\n      className='btn btn-light waves-effect'\r\n      value='-'\r\n      onClick={event => {\r\n        props.addOperand(event.target.value);\r\n      }}\r\n    >\r\n      -\r\n    </button>\r\n    <button\r\n      type='button'\r\n      className='btn btn-light waves-effect'\r\n      value='*'\r\n      onClick={event => {\r\n        props.addOperand(event.target.value);\r\n      }}\r\n    >\r\n      *\r\n    </button>\r\n    <button\r\n      type='button'\r\n      className='btn btn-light waves-effect'\r\n      value='/'\r\n      onClick={event => {\r\n        props.addOperand(event.target.value);\r\n      }}\r\n    >\r\n      /\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      value='7'\r\n      className='btn btn-light waves-effect'\r\n      onClick={event => {\r\n        props.addNumber(event.target.value);\r\n      }}\r\n    >\r\n      7\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='8'\r\n      className='btn btn-light waves-effect'\r\n      onClick={event => {\r\n        props.addNumber(event.target.value);\r\n      }}\r\n    >\r\n      8\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='9'\r\n      className='btn btn-light waves-effect'\r\n      onClick={event => {\r\n        props.addNumber(event.target.value);\r\n      }}\r\n    >\r\n      9\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      value='4'\r\n      className='btn btn-light waves-effect'\r\n      onClick={event => {\r\n        props.addNumber(event.target.value);\r\n      }}\r\n    >\r\n      4\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='5'\r\n      className='btn btn-light waves-effect'\r\n      onClick={event => {\r\n        props.addNumber(event.target.value);\r\n      }}\r\n    >\r\n      5\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='6'\r\n      className='btn btn-light waves-effect'\r\n      onClick={event => {\r\n        props.addNumber(event.target.value);\r\n      }}\r\n    >\r\n      6\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      value='1'\r\n      className='btn btn-light waves-effect'\r\n      onClick={event => {\r\n        props.addNumber(event.target.value);\r\n      }}\r\n    >\r\n      1\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='2'\r\n      className='btn btn-light waves-effect'\r\n      onClick={event => {\r\n        props.addNumber(event.target.value);\r\n      }}\r\n    >\r\n      2\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='3'\r\n      className='btn btn-light waves-effect'\r\n      onClick={event => {\r\n        props.addNumber(event.target.value);\r\n      }}\r\n    >\r\n      3\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      value='0'\r\n      className='btn btn-light waves-effect'\r\n      onClick={event => {\r\n        props.addNumber(event.target.value);\r\n      }}\r\n    >\r\n      0\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      className='btn btn-light waves-effect'\r\n      value='all-clear'\r\n      onClick={event => {\r\n        props.clearResult();\r\n      }}\r\n    >\r\n      Clear\r\n    </button>\r\n    <button\r\n      type='button'\r\n      className='btn btn-light waves-effect'\r\n      value='all-clear'\r\n      onClick={event => {\r\n        props.changeTheme();\r\n      }}\r\n    >\r\n      {props.themeName ? 'Dark Theme' : 'Light Theme'}\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      className='equal-sign operator btn btn-default'\r\n      value='='\r\n      onClick={event => {\r\n        props.showResult();\r\n      }}\r\n    >\r\n      =\r\n    </button>\r\n  </div>\r\n);\r\n\r\nconst stateToProps = state => {\r\n  return {\r\n    themeName: state.lightTheme\r\n  };\r\n};\r\n\r\nconst dispatchtoProps = dispatch => {\r\n  return {\r\n    addOperand: operand => dispatch({ type: 'ADD_OPERAND', val: operand }),\r\n    addNumber: number => dispatch({ type: 'ADD_NUMBER', val: number }),\r\n    clearResult: () => dispatch({ type: 'CLEAR_RESULT' }),\r\n    showResult: () => dispatch({ type: 'SHOW_RESULT' }),\r\n    changeTheme: () => dispatch({ type: 'CHANGE_THEME' })\r\n  };\r\n};\r\n\r\nexport default connect(stateToProps, dispatchtoProps)(Controls);\r\n","import React, { Component } from 'react';\r\nimport DisplayScreen from '../DisplayScreen/DisplayScreen';\r\nimport Controls from '../Controls/Controls';\r\n\r\nclass Calculator extends Component {\r\n  render() {\r\n    return (\r\n      <div className='calculator card'>\r\n        <DisplayScreen />\r\n        <Controls />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React, { Component } from 'react';\nimport Calculator from './Calculator/Calculator';\nimport { connect } from 'react-redux';\nclass App extends Component {\n  render() {\n    return (\n      <section className={this.props.themeName ? 'lightTheme' : 'darkTheme'}>\n        <Calculator />\n      </section>\n    );\n  }\n}\nconst stateToProps = state => {\n  return {\n    themeName: state.lightTheme\n  };\n};\nexport default connect(stateToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore } from 'redux';\nimport { Provider } from 'react-redux';\nimport reducer from './store/reducer';\n\nconst store = createStore(reducer);\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const ADD_OPERAND = 'ADD_OPERAND';\r\nexport const ADD_NUMBER = 'ADD_NUMBER';\r\nexport const CLEAR_RESULT = 'CLEAR_RESULT';\r\nexport const SHOW_RESULT = 'SHOW_RESULT';\r\nexport const CHANGE_THEME = 'CHANGE_THEME';\r\n"],"sourceRoot":""}