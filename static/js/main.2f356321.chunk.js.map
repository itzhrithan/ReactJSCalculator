{"version":3,"sources":["Calculator/Calculator.js","DisplayScreen/DisplayScreen.js","Controls/Controls.js","ThemeControl/ThemeControl.js","App.js","serviceWorker.js","index.js"],"names":["Calculator","state","result","operand","background","lastNumber","numberPressed","event","number","target","value","currentNumber","setState","operandPressed","oldBackground","oldOperand","oldResult","newResult","eval","clearResult","finalResult","className","this","numClick","opeClick","Component","DisplayScreen","props","type","disabled","Controls","onClick","ThemeControl","style","textAlign","changeTheme","App","lightTheme","theme","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.2f356321.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport DisplayScreen from '../DisplayScreen/DisplayScreen';\r\nimport Controls from '../Controls/Controls';\r\n\r\nclass Calculator extends Component {\r\n  state = {\r\n    result: '',\r\n    operand: '',\r\n    background: '',\r\n    lastNumber: '' //for more than one digit Number\r\n  };\r\n\r\n  render() {\r\n    //Function to be run when Number is Pressed\r\n    const numberPressed = event => {\r\n      const number = event.target.value;\r\n      const currentNumber = this.state.lastNumber + number;\r\n      this.setState({\r\n        result: currentNumber,\r\n        lastNumber: currentNumber\r\n      });\r\n    };\r\n\r\n    //Function to be run when Operand is Pressed\r\n    const operandPressed = event => {\r\n      var operand = event.target.value;\r\n      var oldBackground = this.state.background;\r\n      var oldOperand = this.state.operand;\r\n      var oldResult = this.state.result;\r\n      var newResult = eval(oldBackground + oldOperand + oldResult);\r\n\r\n      this.setState({\r\n        result: newResult,\r\n        operand: operand,\r\n        background: newResult,\r\n        lastNumber: ''\r\n      });\r\n    };\r\n\r\n    //Function to clear Display\r\n    const clearResult = () => {\r\n      this.setState({\r\n        result: '',\r\n        operand: '',\r\n        background: '',\r\n        lastNumber: ''\r\n      });\r\n    };\r\n\r\n    //Function to output final Result\r\n    const finalResult = () => {\r\n      var result = this.state.result;\r\n      var oldBackground = this.state.background;\r\n      var oldOperand = this.state.operand;\r\n      var newResult = eval(oldBackground + oldOperand + result);\r\n\r\n      this.setState({\r\n        result: newResult,\r\n        operand: '',\r\n        background: '',\r\n        lastNumber: ''\r\n      });\r\n    };\r\n    return (\r\n      <div className='calculator card'>\r\n        <DisplayScreen result={this.state.result} />\r\n        <Controls\r\n          numClick={numberPressed}\r\n          opeClick={operandPressed}\r\n          clearResult={clearResult}\r\n          finalResult={finalResult}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Calculator;\r\n","import React from 'react';\r\n\r\nconst DisplayScreen = props => (\r\n  <>\r\n    <input\r\n      type='text'\r\n      className='calculator-screen z-depth-1'\r\n      value={props.result}\r\n      disabled\r\n    />\r\n  </>\r\n);\r\n\r\nexport default DisplayScreen;\r\n","import React from 'react';\r\n\r\nconst Controls = props => (\r\n  <div className='calculator-keys'>\r\n    <button\r\n      type='button'\r\n      className='btn btn-light waves-effect'\r\n      value='+'\r\n      onClick={props.opeClick}\r\n    >\r\n      +\r\n    </button>\r\n    <button\r\n      type='button'\r\n      className='btn btn-light waves-effect'\r\n      value='-'\r\n      onClick={props.opeClick}\r\n    >\r\n      -\r\n    </button>\r\n    <button\r\n      type='button'\r\n      className='btn btn-light waves-effect'\r\n      value='*'\r\n      onClick={props.opeClick}\r\n    >\r\n      *\r\n    </button>\r\n    <button\r\n      type='button'\r\n      className='btn btn-light waves-effect'\r\n      value='/'\r\n      onClick={props.opeClick}\r\n    >\r\n      /\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      value='7'\r\n      className='btn btn-light waves-effect'\r\n      onClick={props.numClick}\r\n    >\r\n      7\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='8'\r\n      className='btn btn-light waves-effect'\r\n      onClick={props.numClick}\r\n    >\r\n      8\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='9'\r\n      className='btn btn-light waves-effect'\r\n      onClick={props.numClick}\r\n    >\r\n      9\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      value='4'\r\n      className='btn btn-light waves-effect'\r\n      onClick={props.numClick}\r\n    >\r\n      4\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='5'\r\n      className='btn btn-light waves-effect'\r\n      onClick={props.numClick}\r\n    >\r\n      5\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='6'\r\n      className='btn btn-light waves-effect'\r\n      onClick={props.numClick}\r\n    >\r\n      6\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      value='1'\r\n      className='btn btn-light waves-effect'\r\n      onClick={props.numClick}\r\n    >\r\n      1\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='2'\r\n      className='btn btn-light waves-effect'\r\n      onClick={props.numClick}\r\n    >\r\n      2\r\n    </button>\r\n    <button\r\n      type='button'\r\n      value='3'\r\n      className='btn btn-light waves-effect'\r\n      onClick={props.numClick}\r\n    >\r\n      3\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      value='0'\r\n      className='btn btn-light waves-effect'\r\n      onClick={props.numClick}\r\n    >\r\n      0\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      className='btn btn-light waves-effect'\r\n      value='all-clear'\r\n      onClick={props.clearResult}\r\n    >\r\n      Clear\r\n    </button>\r\n\r\n    <button\r\n      type='button'\r\n      className='equal-sign operator btn btn-default'\r\n      value='='\r\n      onClick={props.finalResult}\r\n    >\r\n      =\r\n    </button>\r\n  </div>\r\n);\r\n\r\nexport default Controls;\r\n","import React, { Component } from 'react';\r\n\r\nexport class ThemeControl extends Component {\r\n  render() {\r\n    return (\r\n      <div style={{ textAlign: 'center' }}>\r\n        <button\r\n          type='button'\r\n          className='btn btn-lg btn-light'\r\n          onClick={() => {\r\n            this.props.changeTheme(true);\r\n          }}\r\n        >\r\n          Light Theme\r\n        </button>\r\n        &nbsp;&nbsp;&nbsp;\r\n        <button\r\n          type='button'\r\n          className='btn btn-lg btn-dark'\r\n          onClick={() => {\r\n            this.props.changeTheme(false);\r\n          }}\r\n        >\r\n          Dark Theme\r\n        </button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ThemeControl;\r\n","import React, { Component } from 'react';\nimport Calculator from './Calculator/Calculator';\nimport ThemeControl from './ThemeControl/ThemeControl';\nclass App extends Component {\n  state = {\n    lightTheme: 'true'\n  };\n  render() {\n    //Function to change Theme Look\n    const changeTheme = theme => {\n      this.setState({ lightTheme: theme });\n    };\n\n    return (\n      <section className={this.state.lightTheme ? 'lightTheme' : 'darkTheme'}>\n        <ThemeControl changeTheme={changeTheme} />\n        <Calculator />\n      </section>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}